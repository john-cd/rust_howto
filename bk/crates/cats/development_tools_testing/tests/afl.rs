// // ANCHOR: example
// // COMING SOON
// // ANCHOR_END: example

// // `afl` (American Fuzzy Loop) is a popular fuzz testing tool, and `afl.rs`
// is a // Rust crate that provides support for integrating AFL with Rust
// programs. // Below is an example of how you can use afl.rs to fuzz a simple
// Rust function.

// // `fuzz_me` is a simple function that checks if the first four bytes of the
// // input data are the bytes for "fuzz." If they are, it triggers a panic.
// fn fuzz_me(data: &[u8]) {
//     if data.len() < 4 {
//         return;
//     }

//     if data[0] == b'f' && data[1] == b'u' && data[2] == b'z' && data[3] ==
// b'z' {         panic!("Fuzzing triggered!");
//     }
// }

// fn main() {
//     // Use the afl::fuzz! macro to run the fuzzing loop, which will
// repeatedly call fuzz_me with different inputs generated by AFL.
//     afl::fuzz!(|data: &[u8]| {
//         fuzz_me(data);
//     });
// }
// // 1) Install AFL.
// // 2) Compile the program for fuzzing:
// // `cargo afl build --release`
// // 3) Run the fuzzer:
// // `cargo afl fuzz -i input_directory -o output_directory
// // target/release/your_crate_name`. AFL will try different inputs to find
// // cases that trigger the panic in the `fuzz_me` function.

// #[test]
// fn test() {
//     main();
// }
// // [finish NOW](https://github.com/john-cd/rust_howto/issues/748)
