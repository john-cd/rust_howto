#![allow(dead_code)]
// // ANCHOR: example
// // COMING SOON
// // ANCHOR_END: example
// //! `afl` (American Fuzzy Loop) is a popular fuzz testing tool, and `afl.rs`
// //! is a Rust crate that provides support for integrating AFL with Rust
// //! programs. Below is an example of how you can use `afl.rs` to fuzz a
// //! simple Rust function.
// //!
// //! # Steps
// //!
// //! 1) Install AFL.
// //! 2) Compile the program for fuzzing:
// //! ```sh
// //! cargo afl build --release
// //! ```
// //! 3) Run the fuzzer:
// //! ```sh
// //! cargo afl fuzz -i input_directory -o output_directory
// //! target/release/your_crate_name
// //! ```
// //! AFL will try different inputs to find
// //! cases that trigger the panic in the `fuzz_me` function.

// /// The `fuzz_me` function takes a byte slice as
// /// input and checks if the first four bytes match the sequence 'f', 'u',
// /// 'z', 'z'. If they do, it triggers a panic, which is a condition that AFL
// /// will try to discover during fuzzing.
// fn fuzz_me(data: &[u8]) {
//     if data.len() < 4 {
//         return;
//     }

//     if data[0] == b'f' && data[1] == b'u' && data[2] == b'z' && data[3] ==
// b'z'     {
//         panic!("Fuzzing triggered!");
//     }
// }

// /// The `main` function sets up the fuzzing environment using the
// /// `afl::fuzz!` macro. This macro takes a closure that will be repeatedly
// /// called with different inputs generated by AFL.
// fn main() {
//     afl::fuzz!(|data: &[u8]| {
//         fuzz_me(data);
//     });
// }

// #[test]
// fn test() {
//     main();
// }
// // [finish NOW](https://github.com/john-cd/rust_howto/issues/748)
