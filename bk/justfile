set shell := ["bash", "-uc"]

# Set shell for Windows OSs:
# PowerShell Core has some of the Unix shell skills we need, such as || and &&
set windows-shell := ["pwsh.exe", "-NoLogo", "-Command"]

[no-exit-message]
_default:
  @just --list --unsorted --justfile {{source_file()}}

# Format the current crate
[no-cd]
fc:
  @just code fmtcurrent

# Format all packages and their local path-based dependencies
fa:
  @just code fmtall

# Check code in the current crate (or the default packages of the workspace if in the root) (all features)
[no-cd]
ckc:
  @just code checkcurrent

# Check all code (all features)
[no-cd]
cka:
  @just code checkall

# Build the package in the current crate (or the default packages of the workspace if in the root) (all features)
[no-cd]
bc:
  @just code buildcurrent

# Build a specific package (all features)
bp pkg:
  @just code buildpkg {{pkg}}

# Build all code (default features)
b:
  @just code build

# Build all code (all features)
ba:
  @just code buildall

# Scan all code for common mistakes (all features)
ca:
  @just code clippyall

# Test only tests that match a given keyword
ntt test:
  @just code nextestthis {{test}}

# Test in the current directory (or the default packages of the workspace if in the root) (all features)
[no-cd]
ntc:
  @just code nextestcurrent

# Test all code (no doctests) (default features)
nt:
  @just code nextest

# Test all code, including doctests (all features)
nta:
  @just code nextestall

# Build and test the code examples
mod code 'scripts/code'

# Build the code documentation
mod docs 'scripts/docs'

# Alias for book
bb:
  @just book buildbook

# Alias for book quick
q:
  @just book quick

# Alias for book serve
s:
  @just book serve

# Build and serve the book
mod book 'scripts/book'

# Manage heading anchors
mod anchors 'scripts/anchors'

# Manage recipe tables
mod recipes 'scripts/recipes'

# Manage crates / dependencies
mod deps 'scripts/deps'

# Manage titles
mod titles 'scripts/titles'

# Manage include statements
mod includes 'scripts/includes'

# Manage code examples
mod examples 'scripts/examples'

# Manage reference definitions
mod refdefs 'scripts/refdefs'

# Manage links
mod links 'scripts/links'

# Manage external URLs
mod urls 'scripts/urls'

# Manage indexes
mod indices 'scripts/indices'

# Hide or unhide chapters
mod chapters 'scripts/chapters'

# Manage the main table of contents
mod toc 'scripts/toc'

# Manage crates
mod crates 'scripts/crates'

# Alias for utils
u *args='':
  @just utils {{args}}

# Utilities
mod utils 'scripts/utils'

# Utilities
mod spelling 'scripts/spelling'

spell extra_param='':
  @just spelling spell {{extra_param}}

lnk pattern:
  @just utils make_link {{pattern}}

# Manage Docker Compose and DockerHub
mod docker 'scripts/docker'

# Manage GitHub
mod gh 'scripts/gh'

# Manage pre-commit
mod? precommit 'scripts/precommit'

# Manage wikilinks
mod wikilinks 'scripts/wikilinks'

## ---- CLEAN ------------------------------------------

# Clean Cargo's `target` and mdbook's `book` directories
@clean: &&_clean
  cargo clean
  mdbook clean

[unix]
@_clean:
  rm --recursive --force ./doctest_cache/

[windows]
@_clean:
  if ( Test-Path -Path .doctest_cache) { rmdir /s /q .doctest_cache }

## ---- PRE-PUSH -----------------------------------

# Prepare for git push: spell sortrefs fmtall clean clippyall testall _builddocall buildbook
# prep: spell sortrefs fmtall clean clippyall testall docs::_builddocall buildbook
