name: Build book code on Windows

on:
  push:
    branches: [main]
    paths:
      - 'bk\**'
  pull_request:
    branches: [main]
    paths:
      - 'bk\**'
  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

defaults:
  run:
    working-directory: '.\bk'

## ---------------------------------------------------------------------

## See `ci.sh` for equivalent steps when using Docker
jobs:
  build-book-code-on-windows:
    name: Build book code on Windows
    runs-on: windows-2025 # required for winget
    steps:

      # - name: Display directory tree (debug)
      #   run: |
      #     tree $env:userprofile\.cargo

      # Checks out your repository under $GITHUB_WORKSPACE
      - name: Code checkout (clones the Git repository)
        uses: actions/checkout@v4

      # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows
      # Install paths for Rust / Cargo in https://github.com/actions/runner-images/blob/main/images/windows/scripts/build/Install-Rust.ps1
      - name: Cache Cargo registry and dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/binstall/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            /usr/local/cargo/bin/
            /usr/local/cargo/binstall/
            /usr/local/cargo/registry/index/
            /usr/local/cargo/registry/cache/
            /usr/local/cargo/git/db/
            /cargo-target-rust_howto/
            target/
          key: rust_howto-book-${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            rust_howto-book-${{ runner.os }}-cargo-

      # - name: Install `protoc` and `jq` (winget)
      #   run: |
      #     winget install protobuf --force --accept-package-agreements --accept-source-agreements --silent
      #     winget install jqlang.jq --force --accept-package-agreements --accept-source-agreements --silent
      #     $env:Path = [System.Environment]::GetEnvironmentVariable("Path","Machine") + ";" + [System.Environment]::GetEnvironmentVariable("Path","User")

      - name: Install `protoc` and `jq` (choco)
        run: |
          choco install jq protoc --confirm --no-progress
        # --limit-output

      - name: Protoc version (debug)
        run: protoc --version

      - name: Install `cargo binstall`
        shell: pwsh
        run: Set-ExecutionPolicy Unrestricted -Scope Process; iex (iwr "https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1").Content

      - name: Install mdBook
        run: |
          cargo binstall --version "0.4.35" --no-confirm mdbook
          cargo binstall --no-confirm mdbook-linkcheck
          cargo binstall --no-confirm mdbook-private
          cargo binstall --no-confirm mdbook-indexing

      - name: Install Nextest
        run: cargo binstall --no-confirm --secure cargo-nextest

      - name: Install `mdbook-utils`
        run: cargo install --locked --force mdbook-utils

      - name: Install nightly Rust
        run: |
          rustup toolchain install nightly
          rustup component add rustfmt clippy --toolchain nightly
          rustup default nightly

      - name: Output Rust version (debug)
        run: rustup --version

      - name: Format
        run: cargo +nightly fmt --all --check

      - name: Fetch
        run: cargo fetch

      - name: Build
        run: cargo build --workspace --all-targets --locked --profile ci

      - name: Clippy
        run: cargo clippy --workspace --all-targets --locked --profile ci -- --deny warnings

      - name: Run tests
        run: |
          cargo nextest run --workspace --all-targets --locked --cargo-profile ci --profile ci --hide-progress-bar
          cargo test --workspace --doc --locked --profile ci -- --show-output

      # TODO P2 make the custom mdbook preprocessor work while on Windows, then reenable
      # - name: Build the book
      #   run: mdbook build; cp static/*.* book/html/; mdbook-utils sitemap
## ---------------------------------------------------------------------

# TODO P1 clean up the following:

# - name: Upload artifacts (optional)
#   uses: actions/upload-artifact@v3
#   with:
#     name: build-artifacts
#     path: target/release/*.exe

## ---------------------------------------------------------------------

## https://github.com/marketplace/actions/sccache-action

# env:
#   SCCACHE_GHA_ENABLED: "true"
#   RUSTC_WRAPPER: "sccache"

#    steps:
# - name: Run sccache-cache
# uses: mozilla-actions/sccache-action@v0.0.7
# - name: Run sccache stat for check
# shell: pwsh
# run: ${SCCACHE_PATH} --show-stats

## ---------------------------------------------------------------------

# - name: Set up Docker Buildx
#   uses: docker/setup-buildx-action@v3
# - name: Login to Docker Hub
#   uses: docker/login-action@v3
#   with:
#     username: ${{ vars.DOCKERHUB_USERNAME }}
#     password: ${{ secrets.DOCKERHUB_TOKEN }}
# - name: Build and push
#   uses: docker/build-push-action@v6
#   with:
#     push: true
#     tags: user/app:latest
#     cache-from: type=gha
#     cache-to: type=gha,mode=max

# TODO P1 review https://github.com/actions-rust-lang/setup-rust-toolchain/tree/main
# https://github.com/marketplace/actions/set-up-a-rust-toolchain
# https://github.com/actions/starter-workflows/tree/main
# https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust
