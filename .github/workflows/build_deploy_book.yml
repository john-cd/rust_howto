## Workflow for building and deploying a mdBook site to GitHub Pages
##
## To get started with mdBook see: https://rust-lang.github.io/mdBook/index.html
##
## Docker's official GitHub Actions: https://docs.docker.com/build/ci/github-actions/

name: Build the book code and deploy the book to GitHub Pages (Linux)

on:
  ## Runs on pushes targeting the default branch
  push:
    branches: ["main"]
    paths:
      - 'bk/**'

  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      deploy_to_gh_pages:
        description: "If true, deploy the book to GitHub Pages"
        type: boolean
        required: true
        default: false

permissions:
  contents: read

## Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
## However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

env:
  IMAGE_NAME: johncd/rust_howto_ci

jobs:
  ## Build job
  ## Introduction to GitHub Actions with Docker: https://docs.docker.com/guides/gha/
  build:
    runs-on: ubuntu-latest
    steps:
      ## https://github.com/marketplace/actions/free-disk-space-ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true
      - name: Code checkout (clones the Git repository)
        uses: actions/checkout@v4
      # - name: Validate YAML files
      #   run: yamllint ./.devcontainer/ ./.github/ ./.github/workflows/
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      ## The default legacy `docker` driver built in the docker daemon has limited support for advanced features like caching:
      ## https://docs.docker.com/build/builders/drivers/
      ## `setup-buildx-action` uses by default the `docker-container` driver, which supports caching:
      ## https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: builder
        uses: docker/setup-buildx-action@v3
      # - name: List Docker builders (debug)
      #   run: docker buildx ls
      # - name: Display the workspace (debug)
      #   run: echo ${{ github.workspace }}
      ## Build and push using the CLI
      - name: Build, load to local image store, push to DockerHub
        run: docker buildx bake -f compose.yaml -f compose-ci.yaml --push --load --allow=fs.read=.. --builder=${{ steps.builder.outputs.name }}
        # Will read the .env file there:
        working-directory: ./.devcontainer/
      # - name: List docker images (debug)
      #   run: docker image ls
      - name: Check that all the code builds and pass tests; build the book
        run: docker compose -f .devcontainer/compose.yaml -f .devcontainer/compose-ci.yaml run book
      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v5
      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v4
        with:
          path: ./book/html/

  ## Deployment job
  ## https://github.com/actions/deploy-pages
  deploy:
    name: Deploy to GitHub Pages
    if: ${{ inputs.deploy_to_gh_pages }}
    # Add a dependency to the build job
    needs: build
    ## Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      pages: write # to deploy to Pages
      id-token: write # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
