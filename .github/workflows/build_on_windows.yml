name: Build Rust code on Windows

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

## ---------------------------------------------------------------------

## See `ci.sh` for equivalent steps when using Docker
jobs:
  build-on-windows:
    name: Build on Windows
    runs-on: windows-latest
    steps:

      # # https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/caching-dependencies-to-speed-up-workflows
      # - name: Cache Cargo registry and dependencies
      #   uses: actions/cache@v4
      #   with:
      #     path: |
      #       ~/.cargo/bin/
      #       ~/.cargo/registry/index/
      #       ~/.cargo/registry/cache/
      #       ~/.cargo/git/db/
      #       /cargo-target-rust_howto/target
      #     key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
      #     restore-keys: |
      #       ${{ runner.os }}-cargo-

      - name: Install cargo binstall
        shell: pwsh
        run: Set-ExecutionPolicy Unrestricted -Scope Process; iex (iwr "https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.ps1").Content

      - name: Install mdBook
        run: |
          cargo binstall --version "0.4.35" --no-confirm mdbook
          cargo binstall --no-confirm mdbook-linkcheck
          cargo binstall --no-confirm mdbook-private
          cargo binstall --no-confirm mdbook-indexing

      - name: Install Nextest
        run: cargo binstall --no-confirm --secure cargo-nextest

      - name: Install mdbook-utils
        run: cargo install --locked mdbook-utils

      - name: Install nightly Rust
        run: |
         rustup toolchain install nightly
         rustup component add rustfmt clippy --toolchain nightly
         rustup default nightly

      - name: Output rust version
        run: rustup --version

      # Checks out your repository under $GITHUB_WORKSPACE
      - name: Code checkout (clones the Git repository)
        uses: actions/checkout@v4

      - name: Format
        run: cargo +nightly fmt --all --check

      - name: Fetch
        run: cargo fetch

      - name: Build
        run: cargo build --workspace --all-targets --locked --profile ci

      - name: Clippy
        run: cargo clippy --workspace --all-targets --locked --profile ci -- --deny warnings

      - name: Run tests
        run: |
          cargo nextest run --workspace --all-targets --locked --cargo-profile ci --profile ci --hide-progress-bar
          cargo test --workspace --doc --locked --profile ci -- --show-output

      - name: Build the book
        run: mdbook build; static/*.* book/html/; mdbook-utils sitemap


## ---------------------------------------------------------------------

      # - name: Upload artifacts (optional)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: build-artifacts
      #     path: target/release/*.exe

## ---------------------------------------------------------------------

## https://github.com/marketplace/actions/sccache-action

# env:
#   SCCACHE_GHA_ENABLED: "true"
#   RUSTC_WRAPPER: "sccache"

#    steps:
        # - name: Run sccache-cache
        # uses: mozilla-actions/sccache-action@v0.0.7
        # - name: Run sccache stat for check
        # shell: pwsh
        # run: ${SCCACHE_PATH} --show-stats

## ---------------------------------------------------------------------

      #- name: Powershell
      #   shell: pwsh
      #   run: |
      #     <pwsh commands here>

## ---------------------------------------------------------------------

      #- run: gh version

## ---------------------------------------------------------------------

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ vars.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}
      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     push: true
      #     tags: user/app:latest
      #     cache-from: type=gha
      #     cache-to: type=gha,mode=max


# TODO review https://github.com/actions-rust-lang/setup-rust-toolchain/tree/main
# https://github.com/marketplace/actions/set-up-a-rust-toolchain
# https://github.com/actions/starter-workflows/tree/main
# https://docs.github.com/en/actions/use-cases-and-examples/building-and-testing/building-and-testing-rust
