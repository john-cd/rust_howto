## Workflow for building and deploying a mdBook site to GitHub Pages
##
## To get started with mdBook see: https://rust-lang.github.io/mdBook/index.html
##
## Docker's official GitHub Actions: https://docs.docker.com/build/ci/github-actions/

name: Build and deploy mdBook site to GitHub Pages

on:
  ## Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  ## Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      deploy_to_gh_pages:
        description: 'If true, deploy the book to GitHub Pages'
        type: boolean
        required: true
        default: false

permissions:
  contents: read

## Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
## However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Default to bash
defaults:
  run:
    shell: bash

env:
  IMAGE_NAME: johncd/rust_howto_ci

jobs:
  ## Build job
  ## Introduction to GitHub Actions with Docker: https://docs.docker.com/guides/gha/
  build:
    runs-on: ubuntu-latest
    steps:
      ## https://github.com/marketplace/actions/free-disk-space-ubuntu
      - name: Free Disk Space (Ubuntu)
        uses: jlumbroso/free-disk-space@main
        with:
          # this might remove tools that are actually needed,
          # if set to "true" but frees about 6 GB
          tool-cache: false
          # all of these default to true, but feel free to set to
          # "false" if necessary for your workflow
          android: true
          dotnet: true
          haskell: true
          large-packages: true
          docker-images: false
          swap-storage: true
      - name: Code checkout (clones the Git repository)
        uses: actions/checkout@v4
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      ## The default legacy `docker` driver built in the docker daemon has limited support for advanced features like caching:
      ## https://docs.docker.com/build/builders/drivers/
      ## `setup-buildx-action` uses by default the `docker-container` driver, which supports caching:
      ## https://github.com/docker/setup-buildx-action
      - name: Set up Docker Buildx
        id: builder
        uses: docker/setup-buildx-action@v3
      # - name: List Docker builders (debug)
      #   run: docker buildx ls
      # - name: Display the workspace (debug)
      #   run: echo ${{ github.workspace }}
      ## Build and push using the CLI
      - name: Build, load to local image store, push to DockerHub
        run: docker buildx bake -f compose.yaml -f compose-ci.yaml --push --load --allow=fs.read=.. --builder=${{ steps.builder.outputs.name }}
        # Will read the .env file there:
        working-directory: ./.devcontainer/
      # - name: List docker images (debug)
      #   run: docker image ls
      - name: Check that all the code builds and pass tests; build the book
        run: docker compose -f .devcontainer/compose.yaml -f .devcontainer/compose-ci.yaml run book
      - name: Setup GitHub Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: Upload artifacts
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./book/html/

  ## Deployment job
  ## https://github.com/actions/deploy-pages
  deploy:
    name: Deploy to GitHub Pages
    if: ${{ inputs.deploy_to_gh_pages }}
    # Add a dependency to the build job
    needs: build
    ## Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
    permissions:
      pages: write     # to deploy to Pages
      id-token: write  # to verify the deployment originates from an appropriate source
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

## Alternative steps to build and push with docker/build-push-action
      # - name: Extract Docker image metadata (extract image tags and annotations for the Docker build)
      #   id: meta
      #   uses: docker/metadata-action@v5
      #   with:
      #     images: ${{ env.IMAGE_NAME }}
      # ## Validate: https://docs.docker.com/build/ci/github-actions/checks/
      # - name: Validate the build configuration
      #   uses: docker/build-push-action@v6
      #   with:
      #     call: check
      #     file: .devcontainer/Dockerfile
      ## Build and push
      ## Uses GitHub Actions caching: https://docs.docker.com/build/ci/github-actions/cache/#github-cache
      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     build-args: |
      #       RUST_VERSION="1.83.0"
      #       RUST_IMAGE_LABEL="1.83.0-bookworm"
      #       MDBOOK_VERSION="0.4.35"
      #     push: true # push to registry
      #     load: true # also load in local image store for the next steps
      #     tags: ${{ steps.meta.outputs.tags }}
      #     annotations: ${{ steps.meta.outputs.annotations }}
      #     cache-from: |
      #       type=gha
      #     cache-to: |
      #       type=gha,mode=max
      #     file: .devcontainer/Dockerfile

## Alternative steps to bake the image (using docker/bake-action and the docker compose files)
## Issue: does not read .devcontainer/.env
      # - name: Get basic information (debug)
      #  run: echo "The job was automatically triggered by a ${{ github.event_name }} event from @${{ github.actor }}. The OS is ${{ runner.os }}"
      # ## Clone the git repo on the CI machine
      # - name: Code checkout (clones the Git repository)
      #   uses: actions/checkout@v4
      # ...
      # ## Build with bake: https://docs.docker.com/guides/compose-bake/
      # ## https://docs.docker.com/build/bake/compose-file/
      # ## See also https://github.com/marketplace/actions/docker-buildx-bake
      # - name: Build and push (via bake)
      #   uses: docker/bake-action@v5
      #   with:
      #     files: |
      #       .devcontainer/compose.yaml
      #       .devcontainer/compose-ci.yaml
      #     push: true # push to DockerHub
      #     load: true # load to local image storage

      ## Advanced caching
      ## TODO consider using https://github.com/marketplace/actions/rust-cache
      ## Once we stop using Nightly Rust! See also
      ## - https://ectobit.com/blog/speed-up-github-actions-rust-pipelines/
      ## - https://doc.rust-lang.org/cargo/guide/cargo-home.html?highlight=crate%20cache#caching-the-cargo-home-in-ci
      ## - granular restore / save: https://github.com/actions/cache/blob/main/restore/README.md
      ## Map the cargo home to a docker volume and export??
      # - name: Set up the cache - cargo home
      #   id: cache_home
      # uses: actions/cache@v4
      # with:
      #   path: |
      #     ~/.cargo/bin/
      #     ~/.cargo/registry/index/
      #     ~/.cargo/registry/cache/
      #     ~/.cargo/git/db/
      #     target/
      #   key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
